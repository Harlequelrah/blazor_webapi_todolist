@page "/manage/TodoItem"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using test.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authentication
@inject IJSRuntime JS
@inject TodoItemService TodoItemService
@inject JwtAuthorizationHandler JwtHandler
@inject NavigationManager Navigation
@inject PostPrerenderService postpre
@inject CustomAuthenticationStateProvider ASP
@rendermode InteractiveServer

<h3>Liste des TodoItems</h3>

<p><button class="btn btn-success btn-sm mx-1" @onclick="ShowAddTodoForm">Ajouter une nouvelle TodoItem</button></p>

@if (TodoItems == null || TodoItems.Count == 0)
{
    <p>Aucune Tâche n'a été ajoutée</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nom</th>
                <th>Is Completed</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var todoItem in TodoItems)
            {
                <tr>
                    <td>@todoItem.Id</td>
                    <td>@todoItem.Title</td>
                    <td>@todoItem.IsCompleted</td>
                    <td>
                        <button class="btn btn-danger text-dark" @onclick="() => Delete(todoItem.Id)" title="Supprimer">
                            <i class="bi bi-trash"></i> Supprimer
                        </button>
                        <button class="btn btn-sm btn-success" @onclick="() => SetDone(todoItem.Id)">
                            <i class="bi bi-check-circle"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => SetNotDone(todoItem.Id)">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div tabindex="-1" id="addTodoModal" style="display:@(showAddTodoForm ? "block" : "none");">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ajouter une nouvelle TodoItem</h5>
                <button type="button" class="close" @onclick="() => showAddTodoForm = false">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="newTodoItem" OnValidSubmit="CreateTodoItem">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="title">Titre</label>
                        <InputText id="title" class="form-control" @bind-Value="newTodoItem.Title" />
                    </div>
                    <button type="submit" class="btn btn-primary">Ajouter</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TodoItem> TodoItems;
    private bool showAddTodoForm = false;
    private TodoItem newTodoItem = new TodoItem();
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTodoItems();
    }

    private async Task LoadTodoItems()
    {
        try
        {
            TodoItems = await TodoItemService.GetTodoItemsAsync();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            // Handle the case where access token is not available
            Navigation.NavigateTo("/login"); // Redirect to your authentication/login page
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading TodoItems: {ex.Message}");
        }
    }

    private async Task ShowAddTodoForm()
    {
        var confirmAdd = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment ajouter une nouvelle tâche ?");
        if (confirmAdd)
        {
            showAddTodoForm = true;
        }
    }

    private async Task CreateTodoItem()
    {
        try
        {
            await TodoItemService.CreateTodoItemAsync(newTodoItem);
            newTodoItem = new TodoItem();
            showAddTodoForm = false;
            await LoadTodoItems(); // Refresh the list after creation
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating TodoItem: {ex.Message}");
        }
    }

    private async Task Delete(int id)
    {
        var confirmDelete = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment supprimer cette TodoItem ?");
        if (confirmDelete && !isFirstRender)
        {
            try
            {
                Console.WriteLine("Deleting TodoItem with ID: " + id);
                // Ajouter l'action DeleteTodoItemAsync à la file d'attente post-prérendu
                    bool result = await TodoItemService.DeleteTodoItemAsync(id);
                    if (result)
                    {
                        await LoadTodoItems(); // Refresh the list after deletion
                    }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting TodoItem: {ex.Message}");
            }
        }
    }

    private async Task SetDone(int todoItemId)
    {
        try
        {
            // Ajouter l'action SetTodoItemDoneAsync à la file d'attente post-prérendu
            postpre.AddAfterRenderAction(async () =>
            {
                await TodoItemService.SetTodoItemDoneAsync(todoItemId);
                await LoadTodoItems(); // Refresh the list after update
            });

            await postpre.ExecuteAfterRenderActionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking TodoItem as done: {ex.Message}");
        }
    }

    private async Task SetNotDone(int todoItemId)
    {
        try
        {
            // Ajouter l'action SetTodoItemNotDoneAsync à la file d'attente post-prérendu
            postpre.AddAfterRenderAction(async () =>
            {
                await TodoItemService.SetTodoItemNotDoneAsync(todoItemId);
                await LoadTodoItems(); // Refresh the list after update
            });

            await postpre.ExecuteAfterRenderActionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking TodoItem as not done: {ex.Message}");
        }
    }
}
